/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/circleBTN/circle_BTN_ALL.glb 
*/

import React, { useRef, useLayoutEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { gsap } from "gsap";
import { useGLTF, useScroll } from "@react-three/drei";

export const FLOOR_HEIGHT = 2.5; // Height of the floor.
export const NB_FLOORS = 2; // Number of floors we have.

export function CircleAll(props) {
  const { nodes, materials } = useGLTF(
    "../models/circleBTN/circle_BTN_ALL.glb"
  );
  // const ref = useRef(); // For animation.
  // const tl = useRef(); //Time line.
  // const scroll = useScroll(); // Use Scroll to get the current scroll value.

  // useFrame(() => {
  //   tl.current.seek(scroll.offset * tl.current.duration()); // Use frame to stick our timeline to the scroll value.
  // });

  // useLayoutEffect(() => {
  //   tl.current = gsap.timeline(); // Define the timeline by using gsap.

  //   //VERTICAL ANIMATION
  //   tl.current.to(
  //     ref.current.position,
  //     {
  //       duration: 0.5, // At least 2 seconds.
  //       y: -FLOOR_HEIGHT * (NB_FLOORS - 1), // and at the end of the 2 seconds let the group to be completed down as we r moving the obj not the camera.
  //     },
  //     0
  //   );
  // }, []);

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Cube010.geometry}
        material={materials["M1_blue.001"]}
      />
      <mesh
        geometry={nodes.Cube011.geometry}
        material={materials["M1_blue.001"]}
        position={[0, -0.041, 0]}
      />
      <mesh
        geometry={nodes.Sphere006.geometry}
        material={materials.M1_White}
        position={[0, 0.047, 0]}
      />
      <mesh
        geometry={nodes.Sphere014.geometry}
        material={materials["M1_orange.001"]}
        position={[0, 0.25, 0]}
      />
    </group>
  );
}

useGLTF.preload("../models/circleBTN/circle_BTN_ALL.glb");
